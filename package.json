{
  "name": "gcms-cache",
  "version": "1.0.0",
  "description": "",
  "license": "ISC",
  "scripts": {
    "sls:dotenv": "NODE_ENV=${NODE_ENV:-development}; sls dotenv",
    "sls:login": "serverless login",
    "start": "yarn delete:redis || true && cross-env-shell 'concurrently -p '{name}' -n 'redis,server' -c 'gray.bgWhite,yellow.bgBlue' \"yarn start:redis\" \"yarn start:server\"'",
    "start:server": "NODE_ENV=${NODE_ENV:-development}; SLS_DEBUG=* yarn sls:dotenv && serverless offline start",
    "emulate:client": "NODE_ENV=${NODE_ENV:-development}; yarn sls:dotenv && node -r esm -r dotenv/config src/cli/index.js dotenv_config_path=./.serverless/.env",
    "emulate:client:staging": "NODE_ENV=${NODE_ENV:-staging} yarn sls:dotenv && node -r esm -r dotenv/config src/cli/index.js dotenv_config_path=./.serverless/.env",
    "emulate:client:production": "NODE_ENV=${NODE_ENV:-production} yarn sls:dotenv && node -r esm -r dotenv/config src/cli/index.js dotenv_config_path=./.serverless/.env",
    "create:redis": "NODE_ENV=${NODE_ENV:-development}; (docker run --name cache_tfp_redis_${NODE_ENV} -d -p 6379:6379 redis redis-server --requirepass localpass || true) && yarn stop:redis ;",
    "start:redis": "NODE_ENV=${NODE_ENV:-development}; yarn create:redis ; docker start -a cache_tfp_redis_${NODE_ENV}",
    "start:redis:daemon": "NODE_ENV=${NODE_ENV:-development}; yarn create:redis && docker start cache_tfp_redis_${NODE_ENV}",
    "stop:redis": "NODE_ENV=${NODE_ENV:-development}; docker stop cache_tfp_redis_${NODE_ENV}",
    "delete:redis": "NODE_ENV=${NODE_ENV:-development}; yarn stop:redis && docker rm cache_tfp_redis_${NODE_ENV} -f",
    "flush:redis:development": "export `cat .env.development | sed -e '/^[ \\\\t]*#/d' | tr -d ' '` && REDIS_PORT=`echo $REDIS_URL | cut -d':' -f2` && echo FLUSHALL | redis-cli -h `echo $REDIS_URL | cut -d':' -f1` -a $REDIS_PASSWORD -p $REDIS_PORT",
    "flush:redis:staging": "export `cat .env.staging | sed -e '/^[ \\\\t]*#/d' | tr -d ' '` && REDIS_PORT=`echo $REDIS_URL | cut -d':' -f2` && echo FLUSHALL | redis-cli -h `echo $REDIS_URL | cut -d':' -f1` -a $REDIS_PASSWORD -p $REDIS_PORT",
    "flush:redis:production": "export `cat .env.production | sed -e '/^[ \\\\t]*#/d' | tr -d ' '` && REDIS_PORT=`echo $REDIS_URL | cut -d':' -f2` && echo FLUSHALL | redis-cli -h `echo $REDIS_URL | cut -d':' -f1` -a $REDIS_PASSWORD -p $REDIS_PORT",
    "check": "NODE_ENV=${NODE_ENV:-development}; sls print",
    "deploy": "NODE_ENV=staging sls deploy",
    "deploy:production": "NODE_ENV=production sls deploy",
    "logs:cache-query": "NODE_ENV=${NODE_ENV:-staging} sls logs -f cache-query",
    "logs:refresh-cache": "NODE_ENV=${NODE_ENV:-staging} sls logs -f refresh-cache",
    "logs:read-cache": "NODE_ENV=${NODE_ENV:-staging} sls logs -f read-cache",
    "logs:status": "NODE_ENV=${NODE_ENV:-staging} sls logs -f status",
    "create": "NODE_ENV=staging sls create_domain",
    "create:production": "NODE_ENV=production sls create_domain",
    "remove": "NODE_ENV=staging sls remove",
    "remove:production": "NODE_ENV=production sls remove",
    "test": "NODE_ENV=${NODE_ENV:-test}; yarn sls:dotenv && yarn delete:redis ; yarn start:redis:daemon && jest --watchAll",
    "test:once": "NODE_ENV=${NODE_ENV:-test}; yarn sls:dotenv && yarn delete:redis ; yarn start:redis:daemon && jest",
    "test:coverage": "NODE_ENV=${NODE_ENV:-test}; yarn sls:dotenv && jest --coverage"
  },
  "jest": {
    "setupFilesAfterEnv": [
      "./jest-preload-env.js",
      "jest-extended"
    ],
    "verbose": true
  },
  "dependencies": {
    "@unly/utils-simple-logger": "1.0.2",
    "apollo-cache-inmemory": "1.6.1",
    "apollo-client": "2.6.1",
    "apollo-link-http": "1.5.14",
    "dotenv": "8.0.0",
    "esm": "3.2.25",
    "graphql": "14.3.1",
    "graphql-tag": "2.10.1",
    "inquirer": "6.3.1",
    "lodash.foreach": "4.5.0",
    "lodash.get": "4.4.2",
    "lodash.map": "4.6.0",
    "log-symbols": "3.0.0",
    "moment": "2.24.0",
    "node-fetch": "2.6.0",
    "raven": "2.6.4",
    "redis": "2.8.0",
    "serverless-sentry": "1.2.0",
    "serverless-sentry-lib": "1.1.2",
    "source-map-support": "0.5.12",
    "winston": "3.2.1"
  },
  "devDependencies": {
    "@babel/cli": "7.4.4",
    "@babel/core": "7.4.5",
    "@babel/preset-env": "7.4.5",
    "@unly/serverless-env-copy-plugin": "1.0.0",
    "babel-jest": "24.8.0",
    "babel-loader": "8.0.6",
    "babel-plugin-source-map-support": "2.0.1",
    "concurrently": "4.1.0",
    "cross-env": "5.2.0",
    "jest": "24.8.0",
    "jest-extended": "0.11.1",
    "serverless": "1.49.0",
    "serverless-domain-manager": "3.2.2",
    "serverless-dotenv-plugin": "2.0.1",
    "serverless-offline": "5.7.2",
    "serverless-plugin-ifelse": "1.0.4",
    "serverless-webpack": "5.3.1",
    "webpack": "4.34.0",
    "webpack-node-externals": "1.7.2"
  }
}
